# -*- coding: utf-8 -*-
"""Lips_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z3rKppMT8UqLpABCk4h6bdyALM-sOGUB
"""

import cv2
import numpy as np
import dlib

image=cv2.imread('input.png')

imageOriginal=image.copy()
img=image.copy()

detector=dlib.get_frontal_face_detector()
imageGray=cv2.cvtColor(imageOriginal,cv2.COLOR_BGR2GRAY)
faces=detector(imageGray)

from google.colab.patches import cv2_imshow
for face in faces:
  x1,y1=face.left(),face.top()
  x2,y2=face.right(),face.bottom()
  imageOriginal=cv2.rectangle(image,(x1,y1),(x2,y2),(0,255,0),2)
  cv2_imshow(imageOriginal)

### will take shape_predictor file 
!git clone https://github.com/nicolasmetallo/eameo-faceswap-generator

predictor=dlib.shape_predictor('/content/eameo-faceswap-generator/shape_predictor_68_face_landmarks.dat')

image=img.copy()
for face in faces:
  x1,y1=face.left(),face.top()
  x2,y2=face.right(),face.bottom()
  imageOriginal=cv2.rectangle(image,(x1,y1),(x2,y2),(0,255,0),2)
  landmarks=predictor(imageGray,face)
  myPoints=[]
  for n in range(68):
    x=landmarks.part(n).x
    y=landmarks.part(n).y
    myPoints.append([x,y])
    cv2.circle(imageOriginal,(x,y),5,(0,0,255),cv2.FILLED)
    cv2.putText(imageOriginal,str(n),(x,y-10),cv2.FONT_HERSHEY_COMPLEX_SMALL,0.5,(0,0,255),1)
  print(myPoints)
cv2_imshow(imageOriginal)

upperlips = myPoints[48:55] + myPoints[60:65][::-1]
lowerlips = myPoints[48:49] + myPoints[54:60][::-1] + myPoints[64:]

image=img.copy()
for i in upperlips:
  cv2.circle(image,tuple(i),4,(0,0,255),thickness=-1)
cv2_imshow(image)

image=img.copy()
for i in lowerlips:
  cv2.circle(image,tuple(i),4,(0,0,255),thickness=-1)
cv2_imshow(image)

lips=upperlips+lowerlips
lips=np.array(lips)

image=img.copy()
mask=np.zeros_like(image)
mask=cv2.fillPoly(mask,[lips],(255,255,255))

cv2_imshow(mask)

imgColorLips=np.zeros_like(mask)
imgColorLips[:]=153,0,157
imgColorLips=cv2.bitwise_and(mask,imgColorLips)
cv2_imshow(imgColorLips)

imgColorLips=cv2.GaussianBlur(imgColorLips,(7,7),10)
cv2_imshow(imgColorLips)

imgColorLips=cv2.addWeighted(img,1,imgColorLips,0.4,0)
cv2_imshow(imgColorLips)

